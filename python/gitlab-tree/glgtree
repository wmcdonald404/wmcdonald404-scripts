#!/usr/bin/env python
import sys
import getopt
import os
import yaml
import json
from gitlab import Gitlab
from anytree.importer import JsonImporter
from anytree import RenderTree

def read_command_line_options(argv):
  # Default value
  default_value = '86427305'
  
  try:
    # Define the options and their corresponding arguments
    opts, args = getopt.getopt(argv, "hg:", ["gvalue="])
  except getopt.GetoptError:
    print('Usage: example.py -g <value>')
    sys.exit(2)
  
  # Parse the options and their arguments
  for opt, arg in opts:
    if opt == '-h':
      print('Usage: example.py -g <value>')
      sys.exit()
    elif opt in ("-g", "--gvalue"):
      default_value = arg
  
  # If no additional option is passed with -g, prompt the user
  if default_value == 'default_value':
    user_input = input(f"No additional value passed with -g. Default value is '{default_value}'. Press Enter to use default or provide a new value: ")
    if user_input:
      default_value = user_input
  
  return default_value

def read_gitlab_token() -> str:
  # Check if GITLAB_TOKEN environment variable exists
  if 'GITLAB_TOKEN' in os.environ:
    return os.environ['GITLAB_TOKEN']
  
  # Check if PAT token exists in glab configuration file
  glab_config_path = os.path.expanduser("~/.config/glab-cli/config.yml")
  if os.path.exists(glab_config_path):
    with open(glab_config_path, 'r') as config_file:
      glab_config = yaml.safe_load(config_file)
      if 'gitlab_token' in glab_config:
        return glab_config['gitlab_token']
  
  # Prompt the user to enter a PAT token
  return input("Enter your GitLab PAT token: ")

def create_gitlab_connection(gitlab_token: str):
  gl = Gitlab(private_token=gitlab_token)
  gl.auth()
  return gl

def read_group_list(gitlab_group_id, gitlab_connection) -> list:
  group_list = []
  subgroups = gitlab_connection.groups.list(get_all=True, parent=gitlab_group_id)
  for subgroup in subgroups:
    group_list.append({ 'parent_group_id':subgroup.parent_id, 'group_id':subgroup.id, 'group_name':subgroup.name })
  return group_list

def create_group_tree(group_list: list, gitlab_connection, parent_id=None) -> list:
  tree = []
  for group in group_list:
    if group['parent_group_id'] == parent_id:
      children = create_group_tree(group_list, gitlab_connection, group['group_id'])
      if children:
        group_dict = {'id': group['group_id'], 'name': group['group_name'], 'kind': 'group', 'icon':'📁', 'children': children}
        gl_group = gitlab_connection.groups.get(group['group_id'])
        for gl_project in gl_group.projects.list(get_all=True):
          group_dict['children'].append({ 'id': gl_project.id, 'name':gl_project.name, 'kind':'project', 'icon':'📗'})
      else:
        group_dict = {'id': group['group_id'], 'name': group['group_name'], 'kind': 'group', 'icon':'📁', 'children': []}
        gl_group = gitlab_connection.groups.get(group['group_id'])
        for gl_project in gl_group.projects.list(get_all=True):
          group_dict['children'].append({ 'id': gl_project.id, 'name':gl_project.name, 'kind':'project', 'icon':'📗'})
      tree.append(group_dict)
  return tree

def main(argv):
  start_group_id = read_command_line_options(argv)  
  gitlab_token = read_gitlab_token()
  gitlab_connection = create_gitlab_connection(gitlab_token)
  flat_group_list = read_group_list(start_group_id, gitlab_connection)
  tree_group_list = create_group_tree(flat_group_list, gitlab_connection)
  tree_group_json = json.dumps(tree_group_list[0])
  importer = JsonImporter()
  root = importer.import_(tree_group_json)
  
  for pre, fill, node in RenderTree(root):
    print("%s%s %s (%s)" % (pre, node.icon, node.name, node.id))
  
if __name__ == "__main__":
  main(sys.argv[1:])

# TOFIX:
# - starting tree from the main group, not the specified group (read_group_list error?)
# - performance (investigate graphql endpoint instead of REST? (https://stackoverflow.com/a/71313528))

# TODO:
# - optionally source GITLAB_GROUP from environment
# - CLI toggle for tree, Python dict or JSON output

# '🗀' (U+1F5C0)
# '📁' (U+1F4C1)
# '📂' (U+1F4C2)
# '🕮' (U+1F56E)
# '📚' (U+1F4DA)
# '📖' (U+1F4D6)
# '📕' (U+1F4D5)
# '📘' (U+1F4D8)
# '📓' (U+1F4D3)
# '📙' (U+1F4D9)
# '📗' (U+1F4D7)
